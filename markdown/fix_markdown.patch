diff --git a/markdown/src/BcSupport/SubformState.php b/markdown/src/BcSupport/SubformState.php
index db8fd3a..bfee587 100644
--- a/markdown/src/BcSupport/SubformState.php
+++ b/markdown/src/BcSupport/SubformState.php
@@ -4,6 +4,7 @@ namespace Drupal\markdown\BcSupport;
 
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Form\FormStateValuesTrait;
 
 /**
  * Stores information about the state of a subform.
@@ -31,6 +32,13 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
    */
   protected $subform;
 
+  /**
+   * Whether to ignore the destination.
+   *
+   * @var bool
+   */
+  protected $ignoreDestination = FALSE;
+
   /**
    * Constructs a new instance.
    *
@@ -69,11 +77,11 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
    * @param string $property
    *   The property name (#parents or #array_parents).
    *
-   * @return mixed
+   * @return array
    *   The parents.
    *
-   * @throws \InvalidArgumentException
-   *   Thrown when the requested property does not exist.
+   * @throws \RuntimeException
+   *   Thrown when the requested property does not exist or is not an array.
    * @throws \UnexpectedValueException
    *   Thrown when the subform is not contained by the given parent form.
    */
@@ -158,4 +166,27 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
     return $this;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function ignoreDestination($status = TRUE) {
+    $this->ignoreDestination = $status;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setIgnoreDestination($status = TRUE) {
+    $this->ignoreDestination = $status;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getIgnoreDestination(): bool {
+    return $this->ignoreDestination;
+  }
+
 }
diff --git a/markdown/src/Form/ParserConfigurationForm.php b/markdown/src/Form/ParserConfigurationForm.php
index d3adf73..33da343 100644
--- a/markdown/src/Form/ParserConfigurationForm.php
+++ b/markdown/src/Form/ParserConfigurationForm.php
@@ -558,7 +558,7 @@ class ParserConfigurationForm extends FormBase implements FilterAwareInterface,
           if ($type === 'filter' && ($filter = $this->getFilter()) && $filter instanceof FilterFormatAwareInterface && ($format = $filter->getFilterFormat())) {
             $definition = $allowedHtml->getPluginDefinition();
             $filterId = isset($definition['requiresFilter']) ? $definition['requiresFilter'] : $plugin_id;
-            $defaultValue = $format->filters()->has($filterId) ? !!$format->filters($filterId)->status : FALSE;
+            $defaultValue = $format->filters()->has($filterId) ? !!$format->filters($filterId) : FALSE;
           }
           elseif ($type === 'extension' && $parser instanceof ExtensibleParserInterface && ($parser->extensions()->has($plugin_id))) {
             $defaultValue = $parser->extension($plugin_id)->isEnabled();
@@ -736,7 +736,7 @@ class ParserConfigurationForm extends FormBase implements FilterAwareInterface,
       if ($parser instanceof ExtensibleParserInterface && !empty($subform['parser']['extensions'])) {
         foreach ($parser->extensions() as $extensionId => $extension) {
           if ($extension instanceof SettingsInterface && $extension instanceof PluginFormInterface && isset($subform['parser']['extensions'][$extensionId]['settings'])) {
-            $parser->submitConfigurationForm($subform['parser']['extensions'][$extensionId]['settings'], SubformState::createForSubform($subform['parser']['extensions'][$extensionId]['settings'], $subform, $subformState));
+            $extension->submitConfigurationForm($subform['parser']['extensions'][$extensionId]['settings'], SubformState::createForSubform($subform['parser']['extensions'][$extensionId]['settings'], $subform, $subformState));
           }
         }
       }
