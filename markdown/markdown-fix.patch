diff --git a/markdown/src/BcSupport/SubformState.php b/markdown/src/BcSupport/SubformState.php
index db8fd3a..38b04e0 100644
--- a/markdown/src/BcSupport/SubformState.php
+++ b/markdown/src/BcSupport/SubformState.php
@@ -4,6 +4,7 @@ namespace Drupal\markdown\BcSupport;
 
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Form\FormStateValuesTrait;
 
 /**
  * Stores information about the state of a subform.
@@ -13,7 +14,8 @@ use Drupal\Core\Form\FormStateInterface;
  *
  * @see https://www.drupal.org/project/markdown/issues/3103679
  */
-class SubformState extends FormStateDecoratorBase implements SubformStateInterface {
+class SubformState extends FormStateDecoratorBase implements SubformStateInterface
+{
 
   use FormStateValuesTrait;
 
@@ -31,6 +33,13 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
    */
   protected $subform;
 
+  /**
+   * Whether to ignore the destination.
+   *
+   * @var bool
+   */
+  protected $ignoreDestination = FALSE;
+
   /**
    * Constructs a new instance.
    *
@@ -41,7 +50,8 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
    * @param \Drupal\Core\Form\FormStateInterface $parent_form_state
    *   The parent form state.
    */
-  protected function __construct(array &$subform, array &$parent_form, FormStateInterface $parent_form_state) {
+  protected function __construct(array &$subform, array &$parent_form, FormStateInterface $parent_form_state)
+  {
     $this->decoratedFormState = $parent_form_state;
     $this->parentForm = $parent_form;
     $this->subform = $subform;
@@ -59,7 +69,8 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
    *
    * @return static
    */
-  public static function createForSubform(array &$subform, array &$parent_form, FormStateInterface $parent_form_state) {
+  public static function createForSubform(array &$subform, array &$parent_form, FormStateInterface $parent_form_state)
+  {
     return new static($subform, $parent_form, $parent_form_state);
   }
 
@@ -69,15 +80,16 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
    * @param string $property
    *   The property name (#parents or #array_parents).
    *
-   * @return mixed
+   * @return array
    *   The parents.
    *
-   * @throws \InvalidArgumentException
-   *   Thrown when the requested property does not exist.
+   * @throws \RuntimeException
+   *   Thrown when the requested property does not exist or is not an array.
    * @throws \UnexpectedValueException
    *   Thrown when the subform is not contained by the given parent form.
    */
-  protected function getParents($property) {
+  protected function getParents($property)
+  {
     foreach ([$this->subform, $this->parentForm] as $form) {
       if (!isset($form[$property]) || !is_array($form[$property])) {
         throw new \RuntimeException(sprintf('The subform and parent form must contain the %s property, which must be an array. Try calling this method from a #process callback instead.', $property));
@@ -103,13 +115,13 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
   /**
    * {@inheritdoc}
    */
-  public function &getValues() {
+  public function &getValues()
+  {
     $exists = NULL;
     $values = &NestedArray::getValue(parent::getValues(), $this->getParents('#parents'), $exists);
     if (!$exists) {
       $values = [];
-    }
-    elseif (!is_array($values)) {
+    } elseif (!is_array($values)) {
       throw new \UnexpectedValueException('The form state values do not belong to the subform.');
     }
 
@@ -119,14 +131,16 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
   /**
    * {@inheritdoc}
    */
-  public function getCompleteFormState() {
+  public function getCompleteFormState()
+  {
     return $this->decoratedFormState instanceof SubformStateInterface ? $this->decoratedFormState->getCompleteFormState() : $this->decoratedFormState;
   }
 
   /**
    * {@inheritdoc}
    */
-  public function setLimitValidationErrors($limit_validation_errors) {
+  public function setLimitValidationErrors($limit_validation_errors)
+  {
     if (is_array($limit_validation_errors)) {
       $limit_validation_errors = array_merge($this->getParents('#parents'), $limit_validation_errors);
     }
@@ -137,11 +151,11 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
   /**
    * {@inheritdoc}
    */
-  public function getLimitValidationErrors() {
+  public function getLimitValidationErrors()
+  {
     $limit_validation_errors = parent::getLimitValidationErrors();
     if (is_array($limit_validation_errors)) {
       return array_slice($limit_validation_errors, count($this->getParents('#parents')));
-
     }
     return $limit_validation_errors;
   }
@@ -149,7 +163,8 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
   /**
    * {@inheritdoc}
    */
-  public function setErrorByName($name, $message = '') {
+  public function setErrorByName($name, $message = '')
+  {
     $parents = $this->subform['#array_parents'];
     $parents[] = $name;
     $name = implode('][', $parents);
@@ -158,4 +173,30 @@ class SubformState extends FormStateDecoratorBase implements SubformStateInterfa
     return $this;
   }
 
-}
+  /**
+   * {@inheritdoc}
+   */
+  public function ignoreDestination($status = TRUE)
+  {
+    $this->ignoreDestination = $status;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setIgnoreDestination($status = TRUE)
+  {
+    $this->ignoreDestination = $status;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getIgnoreDestination(): bool
+  {
+    return $this->ignoreDestination;
+  }
+
+}
\ No newline at end of file
diff --git a/markdown/src/Form/ParserConfigurationForm.php b/markdown/src/Form/ParserConfigurationForm.php
index d3adf73..eab5537 100644
--- a/markdown/src/Form/ParserConfigurationForm.php
+++ b/markdown/src/Form/ParserConfigurationForm.php
@@ -554,11 +554,11 @@ class ParserConfigurationForm extends FormBase implements FilterAwareInterface,
         if (!isset($defaultValue) && isset($allowedHtmlPlugins[$plugin_id])) {
           $defaultValue = $allowedHtmlPlugins[$plugin_id];
         }
-        if (!isset($defaultValue)) {
+         if (!isset($defaultValue)) {
           if ($type === 'filter' && ($filter = $this->getFilter()) && $filter instanceof FilterFormatAwareInterface && ($format = $filter->getFilterFormat())) {
             $definition = $allowedHtml->getPluginDefinition();
             $filterId = isset($definition['requiresFilter']) ? $definition['requiresFilter'] : $plugin_id;
-            $defaultValue = $format->filters()->has($filterId) ? !!$format->filters($filterId)->status : FALSE;
+            $defaultValue = $format->filters()->has($filterId) ? !!$format->filters($filterId) : FALSE; 
           }
           elseif ($type === 'extension' && $parser instanceof ExtensibleParserInterface && ($parser->extensions()->has($plugin_id))) {
             $defaultValue = $parser->extension($plugin_id)->isEnabled();
@@ -569,6 +569,7 @@ class ParserConfigurationForm extends FormBase implements FilterAwareInterface,
         }
       }
 
+
       $renderStrategySubform['plugins'][$type][$plugin_id] = [
         '#type' => 'checkbox',
         '#title' => $label,
@@ -736,7 +737,7 @@ class ParserConfigurationForm extends FormBase implements FilterAwareInterface,
       if ($parser instanceof ExtensibleParserInterface && !empty($subform['parser']['extensions'])) {
         foreach ($parser->extensions() as $extensionId => $extension) {
           if ($extension instanceof SettingsInterface && $extension instanceof PluginFormInterface && isset($subform['parser']['extensions'][$extensionId]['settings'])) {
-            $parser->submitConfigurationForm($subform['parser']['extensions'][$extensionId]['settings'], SubformState::createForSubform($subform['parser']['extensions'][$extensionId]['settings'], $subform, $subformState));
+            $extension->submitConfigurationForm($subform['parser']['extensions'][$extensionId]['settings'], SubformState::createForSubform($subform['parser']['extensions'][$extensionId]['settings'], $subform, $subformState));
           }
         }
       }
